#version 430

layout(local_size_x = 1024) in;

struct Body {
    vec3 x;
    vec3 v;
    vec3 a;
    vec3 aprev;
    float mass;
    int enabled;
    ivec3 cellid;
};

struct Cell {
    int first_body;
    int nbodies;
};

layout(std140, binding=0) uniform Settings {
    ivec3 nn;
    int Out; // fft output
    int In;  // fft input
    int Cos; // cos table for fft
    int Sin; // sin table for fft
};

layout(std430, binding=1) buffer BodiesBuffer {
    Body Bodies[];
};

layout(std430, binding=2) buffer CellsBuffer {
    Cell Cells[];
};

layout(std430, binding=3) buffer NodesBuffer {
    int Nodes[];
};

layout(std430, binding=4) buffer DensityBuffer {
    float A[];
};

void padvance(int ioff, int idx)
{
    for (int j = 0; j <= idx - 1; j++) {
        float a1 = A[ioff+j] + A[ioff+idx + j];
        float a2 = A[ioff+j] - A[ioff+idx + j];
        A[ioff+j]       = a1;
        A[ioff+idx + j] = a2;
    }
}

void sadvance(int ioff, int idx) {
    for (int j = 1; j <= idx - 1; j ++) {
        float a1 = A[ioff+j] - A[ioff+2 * idx - j];
        float a2 = A[ioff+j] + A[ioff+2 * idx - j];
        A[ioff+j]           = a1;
        A[ioff+2 * idx - j] = a2;
    }
}

void cadvance(int ioff, int idx) {
    for (int j = 0; j <= idx - 1; j ++) {
        float a1 = A[ioff+j] + A[ioff+2 * idx - j];
        float a2 = A[ioff+j] - A[ioff+2 * idx - j];
        A[ioff+j]           = a1;
        A[ioff+2 * idx - j] = a2;
    }
}

// fft s->S
void pFFT_1(int ooff, int ioff, float dx, int N, int n, int sz) {
    int N_2 = N/2;
    int yoff = ooff; // [0..N/2]
    int _yoff = ooff+N_2; // [N/2+1..N-1]

    for (int s = 1; s <= n - 2; s++) {
        int idx = 1 << (n - s - 1);
        int vm  = 1 << s;

        padvance(ioff, 2*idx);

        for (int k = 1; k <= idx; k++) {
            float s1 = 0.0;
            float s2 = 0.0;
            for (int j = 0; j <= 2 * idx - 1; j++) {
                s1 += A[ioff + 2 * idx + j] *
                    A[Cos + ((2 * k - 1) * vm * j) % sz];
            }
            for (int j = 1; j <= 2 * idx - 1; j++) {
                s2 += A[ioff + 2 * idx + j] *
                    A[Sin + ((2 * k - 1) * vm * j) % sz];
            }
            int idx2 = (1 << (s - 1)) * (2 * k - 1);
            A[yoff + idx2]  = s1;
            A[_yoff + idx2] = s2;
        }
    }

    padvance(ioff, 1 << (n - (n-1)));
    A[yoff+(1 << (n - 2))]  = A[ioff + 2];
    A[_yoff+(1 << (n - 2))] = A[ioff + 3];

    padvance(ioff, 1 << (n - n));
    A[yoff + 0]             = A[ioff + 0];
    A[yoff + N_2]           = A[ioff + 1];

    for (int k = 0; k <= N_2; k++) {
        A[yoff + k] = A[yoff + k] * dx;
    }

    for (int k = 1; k <= N_2-1; k++) {
        A[_yoff + k] = A[_yoff + k] * dx;
    }

    for (int k = 1; k < N_2/2; k++) {
        float tmp = A[_yoff + k];
        A[_yoff + k] = A[_yoff+N_2-k];
        A[_yoff+N_2-k] = tmp;
    }
}

void sFFT(int ooff,int ioff, float dx, int N, int n, int sz, int nr) {
    for (int s = 1; s <= n - 1; s++) {
        int idx = 1 << (n - s);
        int vm  = 1 << (s - 1);
        sadvance(ioff, idx);

        for (int k = 1; k <= idx; k++) {
            float y = 0;
            for (int j = 1; j <= idx; j++) {
                y += A[ioff+idx * 2 - j] *
                    A[Sin+((2 * k - 1) * vm * nr * j) % sz];

            }
            A[ooff+(2 * k - 1) * vm] = y * dx;
        }
    }
    int idx = 1 << (n - 1);
    A[ooff+idx] = A[ioff+1] * dx;
}

void cFFT(int ooff, int ioff, float dx, int N, int n, int sz, int nr) {
    A[ioff+0] *= 0.5; A[ioff+N] *= 0.5; // samarskii, (15)-(16) p 66

    for (int s = 1; s <= n - 1; s++) {
        int idx = 1 << (n - s);
        int vm  = 1 << (s - 1);
        cadvance(ioff, idx);

        for (int k = 1; k <= idx; k++) {
            float y = 0;
            for (int j = 0; j <= idx - 1; j++) {
                y += A[ioff+idx * 2 - j] *
                    A[Cos+((2 * k - 1) * vm * nr * j) % sz];
            }
            A[ooff+(2 * k - 1) * vm] = y * dx;
        }
    }
    cadvance(ioff, 1 << (n-n));
    A[ooff+0]   = (A[ioff+0] + A[ioff+1]) * dx;
    A[ooff+N]   = (A[ioff+0] - A[ioff+1]) * dx;
    A[ooff+N/2] =  A[ioff+2] * dx;
}

void pFFT(int ooff, int ioff, float dx, int N, int n, int sz) {
    int N_2 = N/2;
    int k;

    //cFFT(&S[0], &s[0], dx, N_2,n-1,2);

    for (k = 1; k < N_2/2; k++) {
        float tmp = A[ioff+N_2 + k];
        A[ioff+N_2 + k] = A[ioff+N-k];
        A[ioff+N-k] = tmp;
    }

    // S[N_2] not filled, N_2+1 first non empty
    sFFT(ooff+N_2, ioff+N_2, dx, N_2, n-1, sz, 2);

    for (k = 1; k <= N_2 - 1; k ++) {
        float S_k   = (A[ooff+k] + A[ooff+N_2+k]);
        float S_N_k = (A[ooff+k] - A[ooff+N_2+k]);
        A[ooff+k]    = S_k;
        A[ooff+N_2+k]= S_N_k;
    }
    for (int k = 1; k < N_2/2; k++) {
        float tmp = A[ooff+N_2 + k];
        A[ooff+N_2+k] = A[ooff+N-k];
        A[ooff+N  -k] = tmp;
    }
}

void main() { }
