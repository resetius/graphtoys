#version 460

layout(local_size_x = 32, local_size_y = 32) in;

layout(std140, binding=0) uniform Settings {
    vec4 origin;
    int particles;
    int stage;
    int nn;  // nx=ny=nz=nn
    int n;   // log(nn)
    float h;
    float l;
    float rho;
    float rcrit;
};

uint xsize = gl_NumWorkGroups.x*gl_WorkGroupSize.x;
uint ysize = gl_NumWorkGroups.y*gl_WorkGroupSize.y;
uint zsize = gl_NumWorkGroups.z*gl_WorkGroupSize.z;

uint globalIndex =
    gl_GlobalInvocationID.z*xsize*ysize+
    gl_GlobalInvocationID.y*xsize+
    gl_GlobalInvocationID.x;

// positions, mass in w-coordinate
layout(std430, binding=1) readonly buffer PosBuffer {
    vec4 Position[];
};

layout(std430, binding=2) buffer ListBuffer {
    int list[];
};

const int nl = 32; // must be equal to local_size_x/local_size_y
shared int lists[nl][nl];

void main() {
    uint threads = xsize*ysize*zsize;
    uint work_size = (particles + threads - 1) / threads;
    uint from = globalIndex * work_size;
    uint to = min(particles, from+work_size);

    for (uint i = from; i < to && i < particles; i++) {
        list[i] = -1;
    }

    lists[gl_LocalInvocationID.y][gl_LocalInvocationID.x] = -1;
    barrier();

    float h32 = l/32;
    // lists by x,y
    for (uint i = from; i < to; i++) {
        vec2 x = vec2(Position[i])-vec2(origin);
        ivec2 index = ivec2(floor(x/h32));

        list[i] = atomicExchange(lists[index.y][index.x], int(i));
    }

    barrier();

    uint ioff = particles+gl_WorkGroupID.x*32*32;
    list[ioff+gl_LocalInvocationID.y*32+gl_LocalInvocationID.x] =
        lists[gl_LocalInvocationID.y][gl_LocalInvocationID.x];
}
