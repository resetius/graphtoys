#version 430

layout( local_size_x = 1000 ) in;

layout(std430, binding=1) buffer Pos {
    vec4 Position[];
};

layout(std430, binding=2) buffer Vel {
    vec4 Velocity[];
};

layout(std430, binding=3) buffer Tmp {
    vec4 Accel[];
};


void main() {
    uint idx = gl_GlobalInvocationID.x;
    uint total = gl_NumWorkGroups.x*gl_WorkGroupSize.x;
    float DeltaT = 0.001;

    float newMass = Position[idx].w;
    bool erase = false;

    // Verlet integration
    if (length(vec3(Position[idx])) < 1e6 && Position[idx].w > 0) {
        // (1) R(t2)
        float mass = Position[idx].w;
        vec4 r = Position[idx] + DeltaT*Velocity[idx] + 0.5 * DeltaT * DeltaT * Accel[idx];
        Position[idx] = vec4(vec3(r), mass);

        // (2) tmp v
        vec4 tmpV = Velocity[idx] + 0.5 * DeltaT * Accel[idx];

        barrier();

        // (3) new Accel
        vec3 A = vec3(0);
        for (int j = 0; j < total; j++) {
            if (idx != j && Position[j].w > 0) {
                float R = length(vec3(Position[idx]-Position[j]));
                float r = (Position[idx].w+Position[j].w)*1e-3;
                if (R > r) {
                    float mass = Position[j].w;
                    vec3 otherA = mass * vec3(Position[j]-Position[idx]) / R / R / R;
                    A = A + otherA;
                } else {
                    if (j < idx) {
                        // elliminate
                        erase = true;
                    } else {
                        // add mass
                        newMass += Position[j].w;
                    }
                }
            }
        }
        Accel[idx] = vec4(A, 0);

        // (4) new Velocity
        Velocity[idx] = tmpV + 0.5 * DeltaT * Accel[idx];
    } else {
        erase = true;
    }

    if (erase) {
        newMass = 0;
    }

    Position[idx] = vec4(vec3(Position[idx]), newMass);
}
