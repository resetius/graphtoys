#version 430

layout( local_size_x = 1000 ) in;

layout(std430, binding=1) buffer Pos {
    vec4 Position[];
};

layout(std430, binding=2) buffer Vel {
    vec4 Velocity[];
};
/*
layout(std430, binding=3) buffer Tmp {
    vec4 Unused[];
};
*/

void main() {
    uint idx = gl_GlobalInvocationID.x;
    uint total = gl_NumWorkGroups.x*gl_WorkGroupSize.x;
    float DeltaT = 0.001;

    float newMass = Position[idx].w;
    bool erase = false;

    if (length(vec3(Position[idx])) < 1e6 && Position[idx].w > 0) {
        vec3 F = vec3(0);

        for (int j = 0; j < total; j++) {
            if (idx != j && Position[j].w > 0) {
                float R = length(vec3(Position[idx]-Position[j]));
                float r = (Position[idx].w+Position[j].w)*1e-3;
                if (R > r) {
                    float mass = Position[j].w * Position[idx].w;
                    vec3 otherA = mass * vec3(Position[j]-Position[idx]) / R / R / R;
                    F = F + otherA;
                } else {
                    if (j < idx) {
                        // elliminate
                        erase = true;
                    } else {
                        // add mass
                        newMass += Position[j].w;
                    }
                }
            }
        }

        Velocity[idx] = Velocity[idx] + DeltaT * vec4(F, 0);
        Velocity[idx] = vec4(vec3(Velocity[idx]), 0.0);
    } else {
        erase = true;
    }

    barrier();

    if (erase) {
        newMass = 0;
    }

    Position[idx] = Position[idx] + DeltaT * Velocity[idx];
    Position[idx] = vec4(vec3(Position[idx]), newMass);
}
