#version 460

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

#include "particles3_comp_base.h"

layout(std430, binding=1) buffer DensityBuffer {
    float Rho[];
};

layout(std430, binding=2) readonly buffer PosBuffer {
    vec4 Position[];
};

layout(std430, binding=3) readonly buffer CellsBuffer {
    int cell_data[];
};

uint max_per_cell = cell_size-1;

void add_density(uvec3 index) {
    uint cell_id = off(index.z, index.y, index.x);
    uint size = min(cell_data[cell_id*cell_size], max_per_cell);
    for (int p = 0; p < size; p++) {
        int cur = cell_data[cell_id*cell_size+p+1];
        float mass = Position[cur].w;
        vec3 x = vec3(Position[cur]) - vec3(origin);
        x = (x-index*h)/h;

        for (int i = 0; i < 2; i++) {
            for (int k = 0; k < 2; k++) {
                for (int j = 0; j < 2; j++) {
                    Rho[poff(index.z+i,index.y+k,index.x+j)] +=
                        4*M_PI*G*mass*abs((1-i-x.z)*(1-k-x.y)*(1-j-x.x))/h/h/h;
                }
            }
        }
    }
}

void main()
{
    uint kk = nn/8;

    float init_value = -4*M_PI*rho;
    for (uint z = 0; z < kk; z++) {
        for (uint y = 0; y < kk; y++) {
            for (uint x = 0; x < kk; x ++) {
                Rho[
                    off(
                        gl_LocalInvocationID.z*kk+z,
                        gl_LocalInvocationID.y*kk+y,
                        gl_LocalInvocationID.x*kk+x
                        )] = init_value;
            }
        }
    }

    barrier();

    /*
      1 0 1 0
      0 0 0 0
      1 0 1 0
      0 0 0 0

      0 1 0 1
      0 0 0 0
      0 1 0 1
      0 0 0 0

      0 0 0 0
      1 0 1 0
      0 0 0 0
      1 0 1 0

      0 0 0 0
      0 1 0 1
      0 0 0 0
      0 1 0 1
     */

    for (int i0 = 0; i0 < kk; i0++) {
        for (int k0 = 0; k0 < kk; k0++) {
            for (int j0 = 0; j0 < kk; j0++) {
                uvec3 index = kk * gl_LocalInvocationID + uvec3(j0, k0, i0);
                add_density(index);
                barrier();
            }
        }
    }
}
