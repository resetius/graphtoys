#version 460

layout(local_size_x = 16, local_size_y = 16) in;

#include "particles3_comp_base.h"

layout(std430, binding=1) buffer DensityBuffer {
    float Rho[];
};

layout(std430, binding=2) readonly buffer PosBuffer {
    vec4 Position[];
};

layout(std430, binding=3) readonly buffer ListBuffer {
    int list[];
};

void add_density(int cur, uint roff) {
    while (cur != -1) {
        float mass = Position[cur].w;
        vec3 x = vec3(Position[cur]) - vec3(origin);
        ivec3 index = ivec3(floor(x/h));
        x = (x-index*h)/h;

        for (int i = 0; i < 2; i++) {
            for (int k = 0; k < 2; k++) {
                for (int j = 0; j < 2; j++) {
                    Rho[roff+poff(index.z+i,index.y+k,index.x+j)] +=
                        4*M_PI*G*mass*abs((1-i-x.z)*(1-k-x.y)*(1-j-x.x));
                }
            }
        }

        cur = list[cur];
    }
}

void main()
{
    uint kk = nn/16;
    uint roff = gl_WorkGroupID.x*nn*nn*nn;

    for (uint y = 0; y < kk; y++) {
        for (uint x = 0; x < kk; x ++) {
            for (int j = 0; j < nn; j++) {
                Rho[roff
                    +off(gl_LocalInvocationID.y*kk+y,
                         gl_LocalInvocationID.x*kk+x,
                         j)] = -4*M_PI*rho;
            }
        }
    }

    barrier();

    uint loff = particles+gl_WorkGroupID.x*32*32;
    /*
      1 0 1 0
      0 0 0 0
      1 0 1 0
      0 0 0 0

      0 1 0 1
      0 0 0 0
      0 1 0 1
      0 0 0 0

      0 0 0 0
      1 0 1 0
      0 0 0 0
      1 0 1 0

      0 0 0 0
      0 1 0 1
      0 0 0 0
      0 1 0 1
     */
    for (int i0 = 0; i0 < 2; i0++) {
        for (int j0 = 0; j0 < 2; j0++) {
            int cur = list[loff+
                           (2*gl_LocalInvocationID.y+i0)*32+
                           (2*gl_LocalInvocationID.x+j0)];

            add_density(cur, roff);
            barrier();
        }
    }
}
