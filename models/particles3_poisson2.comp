#version 460

layout(local_size_x = 32) in;

#include "particles3_comp_base.h"

int sz = 2*nn;
int La = 0;
int iCosOff = La + nn;

layout(std430, binding=1) readonly buffer FFTBuffer {
    float FFT[];
};

// density
layout(std430, binding=2) buffer DensityBuffer {
    float Rho[];
};

// potential
layout(std430, binding=3) buffer PotentialBuffer {
    float Psi[];
};

void swap(inout uint a, inout uint b) {
    uint t = a; a = b; b = t;
}

//shared float ffiCOS[8*256];

shared float S[512]; // in/out
shared float T[512]; // tmp

/*
void load_ffiCOS() {
    uint id = gl_LocalInvocationIndex;
    if (id < (n+1)*nn) {
        ffiCOS[id] = FFT[iCosOff+id];
    }
}
*/

float iCOS(int k, int l) {
    return FFT[iCosOff + (l+1)*nn+(k-1)];
    //return ffiCOS[(l+1)*nn+(k-1)];
}

void padvance(uint ioff, int idx, int id, int work)
{
    for (int j = id; j<id+work&&j <= idx - 1; j++) {
        float a1 = S[ioff+j] + S[ioff+idx + j];
        float a2 = S[ioff+j] - S[ioff+idx + j];
        S[ioff+j]       = a1;
        S[ioff+idx + j] = a2;
    }
}

void sadvance(uint ioff, int idx, int id, int work) {
    for (int j = id+1; j < id+1+work && j <= idx-1; j++) {
        float a1 = S[ioff+j] - S[ioff+2*idx - j];
        float a2 = S[ioff+j] + S[ioff+2*idx - j];
        S[ioff+j]           = a1;
        S[ioff+2 * idx - j] = a2;
    }
}

void cadvance(uint ioff, int idx, int id, int work) {
    for (int j = id; j<id+work&&j <= idx - 1; j ++) {
        float a1 = S[ioff+j] + S[ioff+2 * idx - j];
        float a2 = S[ioff+j] - S[ioff+2 * idx - j];
        S[ioff+j]           = a1;
        S[ioff+2 * idx - j] = a2;
    }
}

// fft s->S
void pFFT_1(uint ooff, uint ioff, float dx, int N, int n) {
#define o(a,b) ((a)*(_2(m))+(b-1))
#define _o(a,b) ((a)*(_2(m-1))+(b-1))

#define zo(a,b) ((a-1)*(_2(m))+(b-1))
#define _zo(a,b) ((a-1)*(_2(m-1))+(b-1))

    int size = int(gl_WorkGroupSize.x);
    int thread_id = int(gl_LocalInvocationID.x);
    int work = max(2, N/size);
    uint boff = 0;
    uint nboff = boff+N;

    int N_2 = N/2;
    int yoff = 0; // [0..N/2]
    int _yoff = N_2; // [N/2+1..N-1]
    int s, k, l, m, j, id, i;

    for (l = n-1; l >= 2; l--) {
        work = max(1, _2(l)/size);
        id = thread_id*work;

        // l = n-s
        padvance(ioff, _2(l), id, work);

        m = 0;
        barrier();
        for (j = id; j<id+work&&j <= _2(l)-1; j++) {
            T[boff+o(j,1)] = S[ioff+_2(l)+j];
        }

        for (m = 1; m <= l-1; m++) {
            int ns = _2(m-1);
            int nj = _2(l-m)-1;

            barrier();
            for (i = id; i < id+work; i++) {
                j = i/ns;
                s = i%ns+1;

                if (j == 0) {
                    T[nboff+o(j,2*s-1)] = T[boff+_o(1,s)] - T[boff+_o(_2(l-m+1)-1,s)];
                    T[nboff+o(j,2*s)] = T[boff+_o(2*j,s)];
                } else if (j <= nj) {
                    T[nboff+o(j,2*s-1)] = T[boff+_o(2*j-1,s)] + T[boff+_o(2*j+1,s)];
                    T[nboff+o(j,2*s)] = T[boff+_o(2*j,s)];
                }
            }
            swap(nboff, boff);
        }
        m=l-1;
        work = max(1, _2(l-1)/size);
        id = thread_id*work;
        barrier();
        for (s = id+1; s<id+1+work&&s <= _2(l-1); s++) {
            T[nboff+zo(1,s)] = T[boff+o(0,s)];
            T[nboff+_yoff+zo(1,s)] = T[boff+o(1,s)];
        }
        swap(nboff, boff);

        for (m = l-1; m >= 1; m--) {
            int ns = _2(m-1);
            int nk = _2(l-m-1);
            barrier();
            for (i = id; i <id+work; i++) {
                s=i%ns+1;
                k=i/ns+1;
                if (k <= nk) {
                    T[nboff+_zo(k,s)] = T[boff+zo(k,2*s)]
                        + iCOS(k,l-m-1)*T[boff+zo(k,2*s-1)];
                    T[nboff+_zo(_2(l-m)-k+1,s)] = T[boff+zo(k,2*s)]
                        - iCOS(k,l-m-1)*T[boff+zo(k,2*s-1)];

                    T[nboff+_yoff+_zo(k,s)] = T[boff+_yoff+zo(k,2*s)]
                        + iCOS(k,l-m-1)*T[boff+_yoff+zo(k,2*s-1)];
                    T[nboff+_yoff+_zo(_2(l-m)-k+1,s)] = -T[boff+_yoff+zo(k,2*s)]
                        + iCOS(k,l-m-1)*T[boff+_yoff+zo(k,2*s-1)];
                }
            }
            swap(nboff, boff);
        }

        barrier();
        for (k = id+1; k<id+1+work&&k <= _2(l-1); k++) {
            S[ooff+yoff+_2(n-l-1)*(2*k-1)] = dx*T[boff+zo(k,1)];
            S[ooff+N-(_2(n-l-1)*(2*k-1))] = dx*T[boff+_yoff+zo(k,1)];
        }
    }

    work = 1; id = thread_id;
    padvance(ioff, 1 << (n - (n-1)), id, work);
    barrier();

    if (id == 0) S[ooff+yoff+(1 << (n - 2))]  = dx*S[ioff+2];
    if (id == 1) S[ooff+N-(1 << (n - 2))] = dx*S[ioff+3];

    padvance(ioff, 1 << (n - n), id, work);
    barrier();
    if (id == 0) S[ooff+yoff + 0]             = dx*S[ioff+0];
    if (id == 1) S[ooff+yoff + N_2]           = dx*S[ioff+1];
#undef o
#undef _o
#undef o
#undef _zo
}

void sFFT(uint ooff, uint ioff, float dx, int N, int n, uint boff0) {
#define o(a,b) ((a-1)*(_2(m))+(b-1))
#define _o(a,b) ((a-1)*(_2(m-1))+(b-1))

    int size = int(gl_WorkGroupSize.x);
    int thread_id = int(gl_LocalInvocationID.x);
    int work = max(2, N/size);
    uint boff = boff0;
    uint nboff = boff+N/2;

    for (int l = n-1; l >= 1; l--) { // l=n-s
        work = max(1, work>>1);
        int id = thread_id*work;

        sadvance(ioff, _2(l), id, work);
        barrier();

        int m = 0, j = 0, s = 0, k = 0, i = 0;
        for (j = id+1; j < id+1+work && j <= _2(l); j++) {
            T[boff+o(j,1)] = S[ioff+(_2(l+1))-j];
        }

        for (m = 1; m <= l-1; m++) {
            int ns = _2(m-1);
            int nj = _2(l-m);
            barrier();

            for (i = id; i < id+work; i++) {
                j = i/ns + 1;
                s = i%ns + 1;
                if (j <= nj) {
                    if (j == nj) {
                        T[nboff+o(j,2*s-1)] = T[boff+_o(2*j-1,s)];
                    } else {
                        T[nboff+o(j,2*s-1)] = T[boff+_o(2*j-1,s)]+T[boff+_o(2*j+1,s)];
                    }
                    T[nboff+o(j,2*s)]   = T[boff+_o(2*j,s)];
                }
            }
            swap(boff, nboff);
        }

        int ns = _2(m-1);
        barrier();
        for (s = id + 1; s < id+1+work && s <= ns; s++) {
            T[nboff+o(1,2*s)] = T[boff+_o(2,s)];
            T[nboff+o(1,2*s-1)] = T[boff+_o(1,s)];
        }
        swap(boff, nboff);

        for (m = l; m >= 1; m--) {
            int ns = _2(m-1);
            int nk = _2(l-m);
            barrier();
            for (i = id, k=i/n+1, s=i%ns+1;
                 k <= nk && i < id+work;
                 i++, k=i/ns+1,s=i%ns+1)
            {
                T[nboff+_o(k,s)] = T[boff+o(k,2*s)]
                    + iCOS(k,l-m)*T[boff+o(k,2*s-1)];
                T[nboff+_o(_2(l-m+1)-k+1,s)] = -T[boff+o(k,2*s)]
                    + iCOS(k,l-m)*T[boff+o(k,2*s-1)];
            }
            swap(boff, nboff);
        }

        barrier();
        for (k = id+1; k < id+1+work&&k <= _2(l); k++) {
            S[ooff+(_2(n-l-1))*(2*k-1)] = dx*T[boff+o(k,1)];
        }
    }

    if (thread_id == 0) S[ooff+_2(n-1)] = dx*S[ioff+1];

#undef o
#undef _o
}

void cFFT(uint ooff, uint ioff, float dx, int N, int n, uint boff0) {
    int size = int(gl_WorkGroupSize.x);
    int thread_id = int(gl_LocalInvocationID.x);
    int work = max(2, N/size);
    uint boff = boff0;
    uint nboff = boff+N;
    int id = thread_id, i = 0;

    if (thread_id == 0) S[ioff+0] *= 0.5;
    if (thread_id == 1) S[ioff+N] *= 0.5;

    barrier();

#define o(a,b) ((a)*(_2(m))+(b-1))
#define _o(a,b) ((a)*(_2(m-1))+(b-1))

    for (int l = n-1; l >= 1; l--) {
        work = max(1, work>>1);
        id = thread_id*work;
        cadvance(ioff, _2(l), id, work);

        int m = 0, j = 0, s = 0, k = 0;
        barrier();
        for (j = id; j <id+work && j <= _2(l)-1; j++) {
            T[boff+o(j,1)] = S[ioff + (_2(l+1))-j]; // (m=0)
        }

        for (m = 1; m <= l-1; m++) {
            int ns = _2(m-1);
            int nj = _2(l-m)-1;

            barrier();
            for (i = id; i < id+work; i++) {
                j = i/ns;
                s = i%ns+1;
                if (j == 0) {
                    T[nboff+o(j,2*s-1)] = T[boff+_o(2*j+1,s)];
                    T[nboff+o(j,2*s)] = T[boff+_o(2*j,s)];
                } else if (j <= nj) {
                    T[nboff+o(j,2*s-1)] = T[boff+_o(2*j-1,s)]+T[boff+_o(2*j+1,s)];
                    T[nboff+o(j,2*s)] = T[boff+_o(2*j,s)];
                }
            }
            swap(nboff, boff);
        }

        // m = l
        barrier();
        for (s = id+1; s<id+1+work && s <= _2(m-1); s++) {
            T[nboff+o(0,2*s-1)] = T[boff+_o(1,s)];
            T[nboff+o(0,2*s)] = T[boff+_o(0,s)];
        }
        swap(nboff, boff);

        barrier();
        for (s = id+1; s<id+1+work && s <= _2(l); s++) {
            T[nboff+o(1,s)] = T[boff+o(0,s)];
        }
        swap(nboff, boff);

        for (m = l; m >= 1; m--) {
            int ns = _2(m-1);
            int nk = _2(l-m);

            barrier();
            for (i = id; i < id+work; i++) {
                k=i/ns+1;
                s=i%ns+1;
                if (k <= nk) {
                    T[nboff+_o(k,s)] = T[boff+o(k,2*s)]
                        + iCOS(k,l-m)*T[boff+o(k,2*s-1)];
                    T[nboff+_o(_2(l-m+1)-k+1,s)] = T[boff+o(k,2*s)]
                        - iCOS(k,l-m)*T[boff+o(k,2*s-1)];
                }
            }
            swap(nboff, boff);
        }

        barrier();
        for (k = id+1; k<id+1+work && k <= _2(l); k++) {
            S[ooff+(_2(n-l-1))*(2*k-1)] = dx*T[boff+o(k,1)];
        }
    }
    id = thread_id; work = 1;
    cadvance(ioff, 1 << (n-n), id, work);
    barrier();

    if (id == 0) S[ooff+0]   = (S[ioff+0] + S[ioff+1]) * dx;
    if (id == 1) S[ooff+N]   = (S[ioff+0] - S[ioff+1]) * dx;
    if (id == 2) S[ooff+N/2] =  S[ioff+2] * dx;

#undef o
#undef _o

}


void pFFT(uint ooff, uint ioff, float dx, int N, int n) {
    int N_2 = N/2;
    int k;

    cFFT(ooff, ioff, dx, N_2, n-1, 0);

    barrier();

    sFFT(ioff, ioff+N_2, dx, N_2, n-1, 0);

    barrier();

    int size = int(gl_WorkGroupSize.x);
    int thread_id = int(gl_LocalInvocationID.x);
    int work = max(1, N_2/size);
    int id = work*thread_id;

    for (k = id+1; k<id+1+work&&k <= N_2 - 1; k ++) {
        int r = k%2;
        float S_k   = (S[ooff+k] + (2*r-1)*S[ioff+k]);
        float S_N_k = (S[ooff+k] - (2*r-1)*S[ioff+k]);
        S[ooff+k]   = S_k;
        S[ooff+N-k] = S_N_k;
    }
}


void split(out uint i, out uint j) {
    i = gl_WorkGroupID.x;
    j = gl_WorkGroupID.y;
}

void main() {
    uint i,k,j;
    const float slh = sqrt(2./l);

    const uint ioff = 0;
    const uint ooff = ioff+nn;

    uint size = gl_WorkGroupSize.x;
    uint thread_id = gl_LocalInvocationID.x;
    uint work = nn/size;
    uint id = thread_id*work;

    if (stage == 1 || stage == 0) {
        // along z
        split(k, j);
        for (i = id; i < id+work; i++) {
            S[ioff+i] = Rho[off(i,k,j)];
        }
        barrier();
        pFFT_1(ooff,ioff,h*slh,nn,n);
        barrier();
        for (i = id; i < id+work; i++) {
            Psi[off(i,k,j)] = S[ooff+i];
        }
        barrier();
    }
    if (stage == 2 || stage == 0) {
        // along y
        split(i, j);
        for (k = id; k < id+work; k++) {
            S[ioff+k] = Psi[off(i,k,j)];
        }
        barrier();
        pFFT_1(ooff,ioff,h*slh,nn,n);
        barrier();
        for (k = id; k < id+work; k++) {
            Psi[off(i,k,j)] = S[ooff+k];
        }
        barrier();
    }
    if (stage == 3 || stage == 0) {
        // along x
        split(i, k);
        for (j = id; j < id+work; j++) {
            S[ioff+j] = Psi[off(i,k,j)];
        }
        barrier();
        pFFT_1(ooff,ioff,h*slh,nn,n);
        barrier();
        for (j = id; j < id+work; j++) {
            Psi[off(i,k,j)] = S[ooff+j];
        }
        barrier();
    }
    if (stage == 4 || stage == 0) {
        split(i, k);
        for (j = id; j < id+work; j++) {
            Psi[off(i,k,j)] /= -FFT[La+i]-FFT[La+k]-FFT[La+j];
            //Psi[off(i,k,j)] *= exp((-FFT[La+i]-FFT[La+k]-FFT[La+j])*rcrit*rcrit);
            //Psi[off(i,k,j)] *= exp((-i*i-k*k-j*j)*rcrit*rcrit);
        }

        if (i == 0 && k == 0 && id == 0) Psi[off(0,0,0)] = 1;
        barrier();
    }
    if (stage == 5 || stage == 0) {
        // along x
        split(i, k);
        for (j = id; j < id+work; j++) {
            S[ioff+j] = Psi[off(i,k,j)];
        }
        barrier();
        pFFT(ooff,ioff,slh,nn,n);
        barrier();
        for (j = id; j < id+work; j++) {
            Psi[off(i,k,j)] = S[ooff+j];
        }
        barrier();
    }
    if (stage == 6 || stage == 0) {
        // along y
        split(i, j);
        for (k = id; k < id+work; k++) {
            S[ioff+k] = Psi[off(i,k,j)];
        }
        barrier();
        pFFT(ooff,ioff,slh,nn,n);
        barrier();
        for (k = id; k < id+work; k++) {
            Psi[off(i,k,j)] = S[ooff+k];
        }
        barrier();
    }
    if (stage == 7 || stage == 0) {
        // along z
        split(k, j);
        for (i = id; i < id+work; i++) {
            S[ioff+i] = Psi[off(i,k,j)];
        }
        barrier();
        pFFT(ooff,ioff,slh,nn,n);
        barrier();
        for (i = id; i < id+work; i++) {
            Psi[off(i,k,j)] = S[ooff+i];
        }
        barrier();
    }
    if (stage == 8) {
        for (i = id; i < id+work; i++) {
            S[ioff+i] = Psi[i];
        }
        barrier();
        pFFT_1(ooff,ioff,1,nn,n);
        barrier();
        for (i = id; i < id+work; i++) {
            Psi[off(i,k,j)] = S[ooff+i];
        }
    }
}
